#+TITLE: Spring

* Dependency injection (DI)

- The "rawest" and oldest form of Spring DI configuration is the "full
  XML" path. Everything is managed using one or more XML files.

  See project [[file:../../code/spring-di-xml-config/][spring-di-xml-config]] from kata [[file:../projects/ck0024_spring-di-xml-config.org][CK0024]] (XML bean
  declaration and injection).

- Starting from Spring 2.5, it became possible to use annotations to
  configure DI. You still had to enable it in an XML file:

  #+begin_src xml
    <context:annotation-config/>
    <context:component-scan base-package="package"/>
  #+end_src

  The XML file takes precedence over annotations in case of a
  conflict.

  See project [TODO] (annotation-based bean definition and injection).

- Starting from Spring 3.0 and "JavaConfig", you can replace the XML
  file with a Java class.

  Of course, from this point on, you can either use the JavaConfig
  style without or with annotation-based injection.

  See kata [[file:../projects/ck0023_spring-di-java-config.org][CK0023]] (JavaConfig bean declaration and injection - no
  annotation-based injection) and project [TODO] (JavaConfig with
  annotation-based injection).
