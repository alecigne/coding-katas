#+TITLE: [CK0031] =apress-junit5-chapter3=

[[file:../../code/ck0031_apress-junit5-chapter3/][Project]] created on [2020-06-01 Mon].

* Notes

The TDD loop:

#+begin_example
.-> RED -> GREEN -> REFACTOR -.
|_____________________________|
#+end_example

** First feature

#+begin_quote
As a user, I want to add multiple books to my bookshelf so that I can
read them later.
#+end_quote

- [[https://github.com/alecigne/coding-katas/commit/87160f][87160f]] :: Implementation of the feature.
- [[https://github.com/alecigne/coding-katas/commit/202d35][202d35]] :: Refactoring: adding multiple books at once with a
  vararg. I didn't use an iteration here like in the book since
  ~List.addAll~ works. \\
  Remember: test behavior, and not some internal state, otherwise the
  tests might fail after a refactoring.
- [[https://github.com/alecigne/coding-katas/commit/d9f920][d9f920]] :: More tests for exceptional situations: no books provided
  and check if the datastructure in the ~BookShelf~ is immutable
  (~Collections.unmodifiableList~).
- [[https://github.com/alecigne/coding-katas/commit/1fd6cb][1fd6cb]] :: Move bookshelf instantiation to ~@BeforeEach~.

** Second feature

#+begin_quote
As a user, I should be able to arrange my bookshelf based on certain
criteria.
#+end_quote

- [[https://github.com/alecigne/coding-katas/commit/4208b1][4208b1]] :: We want to sort by book name, author name, publication
  date or a combination. To sort by book name, we'll use
  ~Comparator.naturalOrder~ (since we're still using strings). The
  implementation is voluntarily bad here since we're changing the
  underlying list in place!

  #+begin_src java
    public List<String> arrange() {
        books.sort(Comparator.naturalOrder());
        return books;
    }
  #+end_src

- [[https://github.com/alecigne/coding-katas/commit/b4e9c0][b4e9c0]] :: Fix the bug by returning a new collection and check that
  the underlying shelf is not sorted in place with a test.
- [[https://github.com/alecigne/coding-katas/commit/680df3][680df3]] :: We need a business class (~Book~) to manage the other
  attributes. Let's refactor everything with a ~Book~ class. I prefer
  to use [[file:ck0021_bloch-builder.org][Bloch's Builder pattern]]. Also, we enrich our ~@BeforeEach~
  code since we always use the same books.

  The ~Book~ class will implement the ~Comparable~ interface. I kinda
  like the ~this~/~that~ idea:

  #+begin_src java
    @Override
    public int compareTo(Book that) {
        return this.title.compareTo(that.title);
    }
  #+end_src

- [[https://github.com/alecigne/coding-katas/commit/6d52e1][6d52e1]] :: Change the bookshelf's API so a custom arrangement
  criterion can be passed under the form of a ~Comparator~. I added
  two tests (reverse alphabetical order and chronological order).

- ~@Disabled~ :: In JUnit 5 we can use ~@Disabled~ to... disable a
  test (or an entire test class). I don't use it since I don't see why
  they disable the specific test they are disabling.

- [[https://github.com/alecigne/coding-katas/commit/161cfc][161cfc]] :: Instead of comparing two lists, assert by comparator with
  AssertJ's ~isSortedAccordingTo~. I like ~BDDAssertions.then~ so I
  use it here.

- [[https://github.com/alecigne/coding-katas/commit/10dc31][10dc31]] :: We add ~@DisplayName~ to tests. I also renamed the tests
  to my liking. I am not convinced by ~@DisplayName~ so far since this
  a good method name will basically be repeated in the annotation.

** Third feature

#+begin_quote
As a user, I should be able to group books in my bookshelf based on
certain criteria.
#+end_quote

- [[https://github.com/alecigne/coding-katas/commit/4594ae][4594ae]] :: We implement the grouping of books by publication
  year. Their test is weird since they don't really test if the
  correct books are mapped to the corresponding year; I use
  ~containsEntry~.
- [[https://github.com/alecigne/coding-katas/commit/0db728][0db728]] :: We add a generic method to the bookshelf to group books
  by a custom criterion. We use this method in the
  ~groupByPublicationYear~ method. Again, I use ~containsEntry~ in the
  test.
- [[https://github.com/alecigne/coding-katas/commit/717b1b][717b1b]] :: We group test cases by feature using the ~@Nested~
  annotation. I don't follow the books recommendation, I used my own
  grouping:

  [[file:../.files/ck0031_1.png]]

  This [[https://www.petrikainulainen.net/programming/testing/junit-5-tutorial-writing-nested-tests/][article]] ([[https://web.archive.org/web/20201115001728/https://www.petrikainulainen.net/programming/testing/junit-5-tutorial-writing-nested-tests/][archive]]) group things by method and then
  conditions. That might be more useful (especially for nested
  ~BeforeEach~ and ~AfterEach~ methods) but it breaks the BDD approach
  of the book, which I quite like (test the behaviour of your unit, no
  its methods).

* Other notes

Here's a somewhat "ideal" (not so much in the "perfect" sense than in
the "theoretical" sense) process I like, based on the
Red-Green-Refactor cycle:

1. *Think* about your implementation and possible bugs. Make a
   mental/physical note of these possible bugs.
2. Make it work:
   - Add a basic test.
   - Make it compile.
   - Make it red.
   - Make it green.
   - Repeat until the basic cases of the feature are covered.
3. Make it correct:
   - Cover the possible bugs you thought about earlier with
     tests. They might be red if you were not careful during
     implementation; make them green.
   - Now that you can look at your implementation, take a step back
     and *think again*: for every angle of attack you see in your
     code, add a test. It might be red; make it green.
4. Make it readable: now that we have very good tests, we can be quite
   confident about our refactoring.
5. Make it fast: early optimizations only - leave the
   micro-optimizations for later. Again, the tests will bring us
   serenity. Maybe we should write performance tests before doing
   this - see [[https://github.com/quick-perf/quickperf][Quickperf]].
